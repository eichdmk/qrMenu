import { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { useMenuPaginated } from "../hooks/useMenuPaginated";
import { createOrder } from "../api/orders";
import { tablesAPI } from "../api/tables";
import { toast } from "react-toastify";
import MenuItemCard from "../components/Menu/MenuItemCard";
import CategoryFilter from "../components/Menu/CategoryFilter";
import QRCart from "../components/Cart/QRCart";
import { formatPrice } from "../utils/format";
import { useScrollToTop } from "../hooks/useScrollToTop";
import styles from "./QRTablePage.module.css";

function QRTablePage() {
  const { token } = useParams();
  const { 
    menuItems, 
    categories, 
    loading: menuLoading, 
    loadingMore,
    activeCategory,
    setActiveCategory,
    observerTarget
  } = useMenuPaginated(20);
  const [table, setTable] = useState(null);
  const [tableLoading, setTableLoading] = useState(true);
  const [orderPlaced, setOrderPlaced] = useState(false);

  const loading = tableLoading || menuLoading;

  // –°–∫—Ä–æ–ª–ª–∏–º –Ω–∞–≤–µ—Ä—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useScrollToTop();

  useEffect(() => {
    const fetchTable = async () => {
      try {
        const response = await tablesAPI.getByToken(token);
        setTable(response.data);
      } catch (error) {
        toast.error("–ù–µ–≤–µ—Ä–Ω—ã–π QR-–∫–æ–¥ —Å—Ç–æ–ª–∏–∫–∞");
      } finally {
        setTableLoading(false);
      }
    };

    fetchTable();
  }, [token]);

  const handleCheckout = async (items, comment = "") => {
    if (!table) return;

    try {
      const orderData = {
        tableId: table.id,
        orderType: 'dine_in',
        comment: comment, // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
        items: items.map(item => ({
          id: item.id,
          quantity: item.quantity,
          price: item.price
        }))
      };

      console.log('Sending order data:', orderData);
      await createOrder(orderData);
      setOrderPlaced(true);
      toast.success("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!");
    } catch (error) {
      console.error('Order error:', error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞");
    }
  };

  if (loading) {
    return (
      <div className={styles.loading}>
        <div className={styles.loadingContent}>
          <div className={styles.spinner}></div>
          <h3>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...</h3>
          <p>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –±–ª—é–¥–∞</p>
        </div>
      </div>
    );
  }

  if (!table) {
    return (
      <div className={styles.error}>
        <div className={styles.errorContent}>
          <div className={styles.errorIcon}>‚ùå</div>
          <h2>–°—Ç–æ–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
          <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å QR-–∫–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É</p>
          <button className={styles.retryButton}>
            <span className={styles.buttonIcon}>üîÑ</span>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  if (orderPlaced) {
    return (
      <div className={styles.success}>
        <div className={styles.successContent}>
          <div className={styles.successIcon}>‚úÖ</div>
          <h2>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</h2>
          <p>–û—Ñ–∏—Ü–∏–∞–Ω—Ç —Å–∫–æ—Ä–æ –ø–æ–¥–æ–π–¥–µ—Ç –∫ –≤–∞—à–µ–º—É —Å—Ç–æ–ª–∏–∫—É</p>
          <div className={styles.tableInfo}>
            <span className={styles.tableIcon}>ü™ë</span>
            <span>–°—Ç–æ–ª–∏–∫ ‚Ññ{table.name}</span>
          </div>
          <button
            className={styles.newOrderButton}
            onClick={() => setOrderPlaced(false)}
          >
            <span className={styles.buttonIcon}>üçΩÔ∏è</span>
            –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.menuPage}>
      <div className={styles.container} id="menu">
        {/* Header */}
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div className={styles.tableInfo}>
              <div className={styles.tableIconWrapper}>
                <span className={styles.tableIcon}>ü™ë</span>
              </div>
              <div className={styles.tableDetails}>
                <h1 className={styles.tableTitle}>
                  <span className={styles.tableNumber}>‚Ññ{table.name}</span>
                </h1>
                <p className={styles.tableSubtitle}>
                  –°–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–æ —Å–≤–æ–µ–≥–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞
                </p>
              </div>
            </div>
            <div className={styles.qrInfo}>
              <span className={styles.qrIcon}>üì±</span>
              <span className={styles.qrText}>QR –ú–µ–Ω—é</span>
            </div>
          </div>
        </div>

        <div className={styles.sectionHeader}>
          <h2 className={styles.sectionTitle}>
            <span className={styles.sectionIcon}>üçΩÔ∏è</span>
            –ù–∞—à–µ –º–µ–Ω—é
          </h2>
          <p className={styles.sectionSubtitle}>
            –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –±–ª—é–¥–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
          </p>
        </div>

        <CategoryFilter
          categories={categories}
          activeCategory={activeCategory}
          onCategoryChange={setActiveCategory}
        />

        <div className={styles.menuGrid}>
          {menuItems.map((item, index) => (
            <div
              key={item.id}
              className={styles.menuItemWrapper}
              style={{ animationDelay: `${Math.min(index, 10) * 0.1}s` }}
            >
              <MenuItemCard item={item} />
            </div>
          ))}
          
          {/* Sentinel element for infinite scroll */}
          <div ref={observerTarget} style={{ height: '20px' }}></div>
          
          {loadingMore && (
            <div className={styles.loadingMore}>
              <div className={styles.spinner}></div>
              <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
            </div>
          )}
        </div>
      </div>

      {/* QR Cart */}
      <QRCart
        onCheckout={handleCheckout}
        checkoutText="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –∫—É—Ö–Ω—é"
      />
    </div>
  );
}

export default QRTablePage;