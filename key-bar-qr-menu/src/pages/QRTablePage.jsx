import { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { useMenu } from "../hooks/useMenu";
import { useOrders } from "../hooks/useOrders";
import { tablesAPI } from "../api/tables";
import { toast } from "react-toastify";
import MenuItemCard from "../components/Menu/MenuItemCard";
import CategoryFilter from "../components/Menu/CategoryFilter";
import OrderSummary from "../components/Cart/OrderSummary";
import { formatPrice } from "../utils/format";
import styles from "./QRTablePage.module.css";

function QRTablePage() {
  const { token } = useParams();
  const { menuItems, categories } = useMenu();
  const { createOrder } = useOrders();
  const [table, setTable] = useState(null);
  const [loading, setLoading] = useState(true);
  const [orderPlaced, setOrderPlaced] = useState(false);
  const [activeCategory, setActiveCategory] = useState("all");

  useEffect(() => {
    const fetchTable = async () => {
      try {
        const response = await tablesAPI.getByToken(token);
        setTable(response.data);
      } catch (error) {
        toast.error("–ù–µ–≤–µ—Ä–Ω—ã–π QR-–∫–æ–¥ —Å—Ç–æ–ª–∏–∫–∞");
      } finally {
        setLoading(false);
      }
    };

    fetchTable();
  }, [token]);

  useEffect(() => {
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, [activeCategory]);

  const handleCheckout = async (items) => {
    if (!table) return;

    try {
      const orderData = {
        tableId: table.id,
        orderType: 'dine_in',
        items: items.map(item => ({
          id: item.id,
          quantity: item.quantity,
          price: item.price
        }))
      };

      await createOrder(orderData);
      setOrderPlaced(true);
      toast.success("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!");
    } catch (error) {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞");
    }
  };

  if (loading) {
    return (
      <div className={styles.loading}>
        <div className={styles.loadingContent}>
          <div className={styles.spinner}></div>
          <h3>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...</h3>
          <p>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –±–ª—é–¥–∞</p>
        </div>
      </div>
    );
  }

  if (!table) {
    return (
      <div className={styles.error}>
        <div className={styles.errorContent}>
          <div className={styles.errorIcon}>‚ùå</div>
          <h2>–°—Ç–æ–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
          <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å QR-–∫–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É</p>
          <button className={styles.retryButton}>
            <span className={styles.buttonIcon}>üîÑ</span>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  if (orderPlaced) {
    return (
      <div className={styles.success}>
        <div className={styles.successContent}>
          <div className={styles.successIcon}>‚úÖ</div>
          <h2>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</h2>
          <p>–û—Ñ–∏—Ü–∏–∞–Ω—Ç —Å–∫–æ—Ä–æ –ø–æ–¥–æ–π–¥–µ—Ç –∫ –≤–∞—à–µ–º—É —Å—Ç–æ–ª–∏–∫—É</p>
          <div className={styles.tableInfo}>
            <span className={styles.tableIcon}>ü™ë</span>
            <span>–°—Ç–æ–ª–∏–∫ ‚Ññ{table.name}</span>
          </div>
          <button 
            className={styles.newOrderButton}
            onClick={() => setOrderPlaced(false)}
          >
            <span className={styles.buttonIcon}>üçΩÔ∏è</span>
            –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      {/* Header */}
      <header className={styles.header}>
        <div className={styles.headerContent}>
          <div className={styles.tableInfo}>
            <div className={styles.tableIconWrapper}>
              <span className={styles.tableIcon}>ü™ë</span>
            </div>
            <div className={styles.tableDetails}>
              <h1 className={styles.tableTitle}>
                <span className={styles.tableNumber}>‚Ññ{table.name}</span>
              </h1>
              <p className={styles.tableSubtitle}>
                –°–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–æ —Å–≤–æ–µ–≥–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞
              </p>
            </div>
          </div>
          <div className={styles.qrInfo}>
            <span className={styles.qrIcon}>üì±</span>
            <span className={styles.qrText}>QR –ú–µ–Ω—é</span>
          </div>
        </div>
      </header>

      {/* Content */}
      <div className={styles.content}>
        <main className={styles.menuSection}>
          <div className={styles.sectionHeader}>
            <h2 className={styles.sectionTitle}>
              <span className={styles.sectionIcon}>üçΩÔ∏è</span>
              –ù–∞—à–µ –º–µ–Ω—é
            </h2>
            <p className={styles.sectionSubtitle}>
              –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –±–ª—é–¥–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
            </p>
          </div>

          <CategoryFilter
            categories={categories}
            activeCategory={activeCategory}
            onCategoryChange={setActiveCategory}
          />
          
          {menuItems.filter(item => 
            activeCategory === "all" || item.category_id === activeCategory
          ).length > 0 ? (
            <div className={styles.menuGrid}>
              {menuItems
                .filter(item => activeCategory === "all" || item.category_id === activeCategory)
                .map((item, index) => (
                  <div 
                    key={item.id} 
                    className={styles.menuItemWrapper}
                    style={{ animationDelay: `${index * 0.1}s` }}
                  >
                    <MenuItemCard item={item} />
                  </div>
                ))}
            </div>
          ) : (
            <div className={styles.emptyMenu}>
              <div className={styles.emptyIcon}>üçΩÔ∏è</div>
              <h3>–ù–µ—Ç –±–ª—é–¥ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
              <p>–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</p>
            </div>
          )}
        </main>

        <aside className={styles.orderSection}>
          <OrderSummary 
            onCheckout={handleCheckout}
            checkoutText="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –∫—É—Ö–Ω—é"
          />
        </aside>
      </div>
    </div>
  );
}

export default QRTablePage;